// Generated by CoffeeScript 1.6.2
(function() {
  var PID,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PID = (function() {
    PID.prototype.kp_ = 0;

    PID.prototype.ki_ = 0;

    PID.prototype.kd_ = 0;

    PID.prototype.mode_ = "auto";

    PID.prototype.direction_ = "normal";

    PID.prototype.sv_ = 0;

    PID.prototype.pv_ = 0;

    PID.prototype.sampleFrequency_ = 100;

    PID.prototype.iterm_ = 0;

    PID.prototype.outMin_ = 0;

    PID.prototype.outMax_ = 255;

    PID.prototype.lastSample_ = 0;

    PID.prototype.lastPv_ = 0;

    PID.prototype.output_ = 0;

    PID.prototype.dispKp_ = 0;

    PID.prototype.dispKi_ = 0;

    PID.prototype.dispKd_ = 0;

    function PID() {
      this.direction = __bind(this.direction, this);
      this.limit = __bind(this.limit, this);
      this.frequency = __bind(this.frequency, this);
      this.tune = __bind(this.tune, this);
      this.compute = __bind(this.compute, this);      this.lastSample_ = now - this.sampleFrequency_;
    }

    PID.prototype.compute = function() {
      var delta, error, input;

      if (this.mode_ !== "auto") {
        false;
      }
      delta = now - this.lastSample_;
      if (delta < this.sampleFrequency_) {
        false;
      }
      error = this.sv_ - this.pv_;
      this.iterm += this.ki_ * error;
      if (this.iterm_ > this.outMax_) {
        this.iterm_ = this.outMax_;
      } else if (this.iterm_ < this.outMin_) {
        this.iterm_ = this.outMin_;
      }
      input = this.pv_ - this.lastPv_;
      this.output_ = this.kp_ * error + this.iterm_ - this.kd_ * input;
      if (this.output_ > this.outMax_) {
        this.output = this.outMax_;
      } else if (this.output_ < this.outMin_) {
        this.output_ = this.outMin_;
      }
      this.lastPv_ = input;
      this.lastSample_ = delta;
      return true;
    };

    PID.prototype.tune = function(kp, ki, kd) {
      var sampleFreqInSecs;

      if (kp < 0 || ki < 0 || kd < 0) {
        return this;
      }
      sampleFreqInSecs = this.sampleFrequency_ / 1000;
      this.dispKp_ = kp;
      this.dispKi_ = ki;
      this.dispKd_ = kd;
      this.kp_ = kp;
      this.ki_ = ki * sampleFreqInSecs;
      this.kd_ = kd / sampleFreqInSecs;
      if (this.direction_ === "reverse") {
        this.kp_ = 0 - this.kp_;
        this.ki_ = 0 - this.ki_;
        this.kd_ = 0 - this.kd_;
      }
      return this;
    };

    PID.prototype.frequency = function(newSampleFrequency) {
      var ratio;

      if (newSampleFrequency <= 0) {
        return this;
      }
      ratio = newSampleFrequency / this.sampleFrequency_;
      this.ki_ *= ratio;
      this.kd_ /= ratio;
      this.sampleFrequency_ = newSampleFrequency;
      return this;
    };

    PID.prototype.limit = function(min, max) {
      if (min >= max) {
        return this;
      }
      this.outMin_ = min;
      this.outMax_ = max;
      if (this.mode_ === "auto") {
        if (this.output_ > this.outMax_) {
          this.output_ = this.outMax_;
        } else if (this.output_ < this.outMin_) {
          this.output = this.outMin_;
        }
        if (this.iterm_ > this.outMax_) {
          this.iterm_ = this.outMax_;
        } else if (this.iterm_ < this.outMin_) {
          this.iterm_ = this.outMin_;
        }
      }
      return this;
    };

    PID.prototype.direction = function(dir) {
      if (this.mode_ === "auto" && dir !== this.direction_) {
        this.kp_ = 0 - this.kp_;
        this.ki_ = 0 - this.ki_;
        this.kd_ = 0 - this.kd_;
      }
      this.direction_ = dir;
      return this;
    };

    return PID;

  })();

  module.exports.PID = PID;

}).call(this);
